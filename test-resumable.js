const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

// ÊµãËØïÊñ≠ÁÇπÁª≠‰º†ÂäüËÉΩ
async function testResumableImport() {
    console.log('üß™ Êñ≠ÁÇπÁª≠‰º†ÂäüËÉΩÊµãËØïÂºÄÂßã...\n');
    
    const testDbPath = './test_resumable.db';
    
    // Ê∏ÖÁêÜ‰πãÂâçÁöÑÊµãËØïÊñá‰ª∂
    if (fs.existsSync(testDbPath)) {
        fs.unlinkSync(testDbPath);
    }
    
    try {
        // Èò∂ÊÆµ1ÔºöÂàõÂª∫ÊµãËØïÊï∞ÊçÆÂ∫ìÂπ∂ÊèíÂÖ•ÈÉ®ÂàÜÊï∞ÊçÆ
        console.log('üìù Èò∂ÊÆµ1ÔºöÊ®°ÊãüÈ¶ñÊ¨°ÂØºÂÖ•...');
        await createTestDatabase(testDbPath);
        await insertTestBlocks(testDbPath, 1, 1000);
        
        let maxHeight = await getMaxBlockHeight(testDbPath);
        console.log(`  ‚úÖ È¶ñÊ¨°ÂØºÂÖ•ÂÆåÊàêÔºåÊúÄÂ§ßÈ´òÂ∫¶: #${maxHeight}`);
        
        // Èò∂ÊÆµ2ÔºöÊ®°ÊãüÁ®ãÂ∫èÈáçÂêØÔºå‰ªéÊñ≠ÁÇπÁªßÁª≠
        console.log('\nüîÑ Èò∂ÊÆµ2ÔºöÊ®°ÊãüÊñ≠ÁÇπÁª≠‰º†...');
        console.log('  üìä Êñ≠ÁÇπÁª≠‰º†Ê£ÄÊü•:');
        console.log(`    üíæ Êï∞ÊçÆÂ∫ìÊúÄÂ§ßÈ´òÂ∫¶: #${maxHeight}`);
        
        const resumeStartHeight = maxHeight + 1;
        console.log(`    üîÑ Â∫î‰ªé #${resumeStartHeight} ÁªßÁª≠ÂØºÂÖ•`);
        
        // ÊèíÂÖ•Êõ¥Â§öÊï∞ÊçÆÔºàÊ®°ÊãüÁª≠‰º†Ôºâ
        await insertTestBlocks(testDbPath, resumeStartHeight, resumeStartHeight + 500);
        
        maxHeight = await getMaxBlockHeight(testDbPath);
        console.log(`  ‚úÖ Êñ≠ÁÇπÁª≠‰º†ÂÆåÊàêÔºåÊúÄÂ§ßÈ´òÂ∫¶: #${maxHeight}`);
        
        // Èò∂ÊÆµ3ÔºöÈ™åËØÅÊï∞ÊçÆÂÆåÊï¥ÊÄß
        console.log('\nüîç Èò∂ÊÆµ3ÔºöÈ™åËØÅÊï∞ÊçÆÂÆåÊï¥ÊÄß...');
        const stats = await getDatabaseStats(testDbPath);
        
        console.log(`  üìä Êï∞ÊçÆÂ∫ìÁªüËÆ°:`);
        console.log(`    üî¢ ÊÄªÂå∫ÂùóÊï∞: ${stats.totalBlocks.toLocaleString()}`);
        console.log(`    üìè È´òÂ∫¶ËåÉÂõ¥: #${stats.minHeight} - #${stats.maxHeight}`);
        console.log(`    üîó ËøûÁª≠ÊÄßÊ£ÄÊü•: ${stats.isSequential ? '‚úÖ ËøûÁª≠' : '‚ùå ÊúâÁº∫Â§±'}`);
        
        // Èò∂ÊÆµ4ÔºöÊµãËØïÈáçÂ§çÂØºÂÖ•ÁöÑÂéªÈáçÂäüËÉΩ
        console.log('\nüõ°Ô∏è Èò∂ÊÆµ4ÔºöÊµãËØïÊï∞ÊçÆÂéªÈáçÂäüËÉΩ...');
        const beforeCount = stats.totalBlocks;
        
        // Â∞ùËØïÈáçÂ§çÊèíÂÖ•Áõ∏ÂêåÊï∞ÊçÆ
        await insertTestBlocks(testDbPath, 500, 600); // ÈáçÂ§çÊèíÂÖ•Â∑≤Â≠òÂú®ÁöÑÂå∫Âùó
        
        const afterStats = await getDatabaseStats(testDbPath);
        console.log(`  üìä ÂéªÈáçÊµãËØïÁªìÊûú:`);
        console.log(`    ÂØºÂÖ•Ââç: ${beforeCount.toLocaleString()} ‰∏™Âå∫Âùó`);
        console.log(`    ÂØºÂÖ•Âêé: ${afterStats.totalBlocks.toLocaleString()} ‰∏™Âå∫Âùó`);
        console.log(`    ÂéªÈáçÊïàÊûú: ${beforeCount === afterStats.totalBlocks ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Ë¥•'}`);
        
        console.log('\nüéØ Êñ≠ÁÇπÁª≠‰º†ÂäüËÉΩÊµãËØïÂÆåÊàêÔºÅ');
        
        if (stats.isSequential && beforeCount === afterStats.totalBlocks) {
            console.log('‚úÖ ÊâÄÊúâÊµãËØïÈÄöËøáÔºöÊñ≠ÁÇπÁª≠‰º†ÂíåÊï∞ÊçÆÂéªÈáçÂäüËÉΩÊ≠£Â∏∏');
        } else {
            console.log('‚ùå ÊµãËØïÂ§±Ë¥•ÔºöÂèëÁé∞ÂäüËÉΩÂºÇÂ∏∏');
        }
        
    } catch (error) {
        console.error('‚ùå ÊµãËØïÂ§±Ë¥•:', error);
    } finally {
        // Ê∏ÖÁêÜÊµãËØïÊñá‰ª∂
        if (fs.existsSync(testDbPath)) {
            fs.unlinkSync(testDbPath);
            console.log('üóëÔ∏è Ê∏ÖÁêÜÊµãËØïÊñá‰ª∂');
        }
    }
}

// ÂàõÂª∫ÊµãËØïÊï∞ÊçÆÂ∫ì
function createTestDatabase(dbPath) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath);
        
        db.run(`CREATE TABLE p3d_block_info (
            id INTEGER PRIMARY KEY,
            timestamp INTEGER NOT NULL,
            author VARCHAR(50) NOT NULL,
            authorPublicKey VARCHAR(66),
            blockhash VARCHAR(66) NOT NULL,
            difficult BIGINT,
            reward_amount BIGINT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`, (err) => {
            if (err) {
                reject(err);
            } else {
                // ÂàõÂª∫Á¥¢Âºï
                db.run(`CREATE INDEX idx_timestamp ON p3d_block_info(timestamp)`);
                db.run(`CREATE INDEX idx_author ON p3d_block_info(author)`);
                db.close(() => resolve());
            }
        });
    });
}

// ÊèíÂÖ•ÊµãËØïÂå∫ÂùóÊï∞ÊçÆ
function insertTestBlocks(dbPath, startHeight, endHeight) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath);
        
        console.log(`    üì¶ ÊèíÂÖ•ÊµãËØïÊï∞ÊçÆ: #${startHeight} - #${endHeight}`);
        
        db.serialize(() => {
            db.run("BEGIN TRANSACTION");
            
            const stmt = db.prepare(`INSERT OR IGNORE INTO p3d_block_info 
                (id, timestamp, author, authorPublicKey, blockhash, difficult, reward_amount) 
                VALUES (?, ?, ?, ?, ?, ?, ?)`);
            
            for (let height = startHeight; height <= endHeight; height++) {
                stmt.run([
                    height,
                    1640995200 + height * 60, // Êó∂Èó¥Êà≥
                    `test_author_${height % 10}`, // ‰ΩúËÄÖÔºàÂæ™ÁéØÔºâ
                    `0x${'0'.repeat(64)}`, // ÂÖ¨Èí•
                    `0x${height.toString(16).padStart(64, '0')}`, // Âå∫ÂùóÂìàÂ∏å
                    Math.floor(Math.random() * 1000000), // ÈöæÂ∫¶
                    Math.floor(Math.random() * 1000000000) // Â•ñÂä±
                ]);
            }
            
            stmt.finalize();
            
            db.run("COMMIT", (err) => {
                db.close(() => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        });
    });
}

// Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÊúÄÂ§ßÂå∫ÂùóÈ´òÂ∫¶
function getMaxBlockHeight(dbPath) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath);
        
        db.get(`SELECT MAX(id) as maxHeight FROM p3d_block_info`, (err, row) => {
            db.close();
            if (err) {
                reject(err);
            } else {
                resolve(row?.maxHeight || 0);
            }
        });
    });
}

// Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØ
function getDatabaseStats(dbPath) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath);
        
        db.all(`
            SELECT 
                MIN(id) as minHeight,
                MAX(id) as maxHeight,
                COUNT(*) as totalBlocks
            FROM p3d_block_info
        `, (err, rows) => {
            if (err) {
                db.close();
                reject(err);
                return;
            }
            
            const stats = rows[0];
            
            // Ê£ÄÊü•Êï∞ÊçÆËøûÁª≠ÊÄß
            db.get(`
                SELECT COUNT(*) as expectedCount 
                FROM (
                    SELECT id FROM p3d_block_info 
                    WHERE id BETWEEN ? AND ?
                ) 
            `, [stats.minHeight, stats.maxHeight], (err, row) => {
                db.close();
                
                if (err) {
                    reject(err);
                } else {
                    const expectedCount = stats.maxHeight - stats.minHeight + 1;
                    stats.isSequential = (row.expectedCount === expectedCount) && (stats.totalBlocks === expectedCount);
                    resolve(stats);
                }
            });
        });
    });
}

// ËøêË°åÊµãËØï
if (require.main === module) {
    testResumableImport().catch(error => {
        console.error('ÊµãËØïËøêË°åÂ§±Ë¥•:', error);
        process.exit(1);
    });
}

module.exports = { testResumableImport }; 